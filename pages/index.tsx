import React from 'react';
import Head from 'next/head';
import type { NextPage } from 'next';

import Header from '../components/Header';
import AudioButton from '../components/AudioButton';
import soundsList from '../utils/soundsList';
import genRandomNums from '../utils/genRandomNums';

interface IAudioState {
  isPlaying: boolean;
}

interface IInitialHomePageState {
  rain: IAudioState;
  fan: IAudioState;
  plane: IAudioState;
  space: IAudioState;
  meditation: IAudioState;
  sleep: IAudioState;
  coffee: IAudioState;
  furnace: IAudioState;
  birds: IAudioState;
  waves: IAudioState;
}

const Home: NextPage = () => {
  const initialState = soundsList.reduce((state, sound) => {
    return { ...state, [sound.name]: { isPlaying: false } };
  }, {} as IInitialHomePageState);

  const [audioState, setAudioState] = React.useState(initialState);

  const audioButtonRefs = React.useRef(
    soundsList.map((sound) => (typeof Audio !== 'undefined' ? new Audio(sound.src) : undefined))
  );

  const toggleSound = (soundName: string, idx: number) => {
    const isCurrentSoundPlaying = audioState[soundName as keyof IInitialHomePageState].isPlaying;
    setAudioState({
      ...audioState,
      [soundName]: {
        isPlaying: !isCurrentSoundPlaying,
      },
    });

    isCurrentSoundPlaying
      ? // @ts-ignore
        audioButtonRefs.current[idx].pause()
      : // @ts-ignore
        audioButtonRefs.current[idx].play();
  };

  const randomizeSounds = () => {
    // Pause all active audio
    audioButtonRefs.current.forEach((audio) => {
      audio?.pause();
    });

    const idxs = genRandomNums(10, 3); // Get 3 random ints between 0-10
    const keyNames = Object.keys(initialState); // Get names of sounds

    // Generate list of tuples [soundName, soundIdx]
    const [[s1Name, s1Idx], [s2Name, s2Idx], [s3Name, s3Idx]] = idxs.reduce(
      (soundTuples: any[], soundIdx: number) => {
        const soundName = keyNames[soundIdx];
        return [...soundTuples, [soundName, soundIdx]];
      },
      []
    );

    setAudioState({
      ...initialState,
      [s1Name]: {
        isPlaying: true,
      },
      [s2Name]: {
        isPlaying: true,
      },
      [s3Name]: {
        isPlaying: true,
      },
    });

    // Find the randomly picked sounds and play them
    audioButtonRefs.current
      .filter((audio) => {
        return (
          audio?.src.includes(s1Name) || audio?.src.includes(s2Name) || audio?.src.includes(s3Name)
        );
      })
      .forEach((match) => {
        match?.play();
      });
  };

  return (
    <div className="flex flex-col h-screen">
      <Head>
        <title>Embient</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/flameico.png" />
      </Head>

      <Header randomizeSounds={randomizeSounds} />

      <main className="flex flex-col h-screen bg-gray-800 pt-4">
        <div className="flex flex-wrap items-center justify-center bg-gray-800">
          {soundsList.map((sound, idx) => {
            return (
              <AudioButton
                key={idx}
                ref={audioButtonRefs.current[idx] as any}
                src={sound.src}
                name={sound.name}
                onPress={() => toggleSound(sound.name, idx)}
                icon={sound.icon}
                // @ts-ignore
                isActive={audioState[sound.name].isPlaying}
              ></AudioButton>
            );
          })}
        </div>
      </main>
    </div>
  );
};

export default Home;
